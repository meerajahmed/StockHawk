package com.sam_chordas.android.stockhawk.ui;

import android.content.Context;
import android.database.Cursor;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.app.NavUtils;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.sam_chordas.android.stockhawk.R;
import com.sam_chordas.android.stockhawk.data.QuoteHistoryColumns;
import com.sam_chordas.android.stockhawk.data.QuoteProvider;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link StockDetailFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class StockDetailFragment extends Fragment implements LoaderManager.LoaderCallbacks<Cursor>{
    public static final String ARG_SYMBOL = "SYMBOL";
    public  static final int CURSOR_LOADER_ID = 1;
    private String mSymbol;
    private LineChartView mLineChart;
    public StockDetailFragment() {
        // Required empty public constructor
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param symbol stock symbol.
     * @return A new instance of fragment StockDetailFragment.
     */
    public static StockDetailFragment newInstance(String symbol) {
        StockDetailFragment fragment = new StockDetailFragment();
        Bundle args = new Bundle();
        args.putString(ARG_SYMBOL, symbol);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mSymbol = getArguments().getString(ARG_SYMBOL);
        }
        getLoaderManager().initLoader(CURSOR_LOADER_ID, null, this);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_stock_detail, container, false);
        TextView symbolTextView = (TextView) view.findViewById(R.id.stock_symbol);
        symbolTextView.setText(mSymbol);
        mLineChart = (LineChartView) view.findViewById(R.id.line_chart);
        return view;
    }

    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        String[] projection = {
                QuoteHistoryColumns._ID,
                QuoteHistoryColumns.SYMBOL,
                QuoteHistoryColumns.BID_PRICE,
                QuoteHistoryColumns.DATE
        };
        return new CursorLoader(
                getContext(),
                QuoteProvider.QuoteHistory.CONTENT_URI,
                projection,
                QuoteHistoryColumns.SYMBOL + " = ? ",
                new String[]{mSymbol},
                QuoteHistoryColumns._ID + " ASC");

    }

    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {
        if( cursor != null ){
            updateChart(cursor);
        }
    }

    private void updateChart(Cursor cursor) {

        List<AxisValue> axisValues = new ArrayList<AxisValue>();
        List<PointValue> pointValues = new ArrayList<PointValue>();

        for( int i = 0; cursor.moveToNext(); i++ ){
            String date = cursor.getString(cursor.getColumnIndex(QuoteHistoryColumns.DATE));
            Float bidPrice = cursor.getFloat(cursor.getColumnIndex(QuoteHistoryColumns.BID_PRICE));
            PointValue pointValue = new PointValue(i, bidPrice);
            pointValue.setLabel(date);
            pointValues.add(pointValue);
            AxisValue axisValue = new AxisValue(i);
            axisValue.setLabel(date);
            axisValues.add(axisValue);
        }

        Line line = new Line(pointValues).setColor(Color.WHITE).setCubic(false);
        List<Line> lines = new ArrayList<>();
        lines.add(line);
        LineChartData lineChartData = new LineChartData();
        lineChartData.setLines(lines);

        Axis xAxis = new Axis(axisValues);
        xAxis.setHasLines(true);
        xAxis.setMaxLabelChars(4);
        lineChartData.setAxisXBottom(xAxis);

        Axis yAxis = new Axis();
        yAxis.setAutoGenerated(true);
        yAxis.setHasLines(true);
        yAxis.setMaxLabelChars(4);
        lineChartData.setAxisYLeft(yAxis);

        mLineChart.setInteractive(false);
        mLineChart.setLineChartData(lineChartData);

    }

    @Override
    public void onLoaderReset(Loader<Cursor> loader) {

    }
}
